// protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=.
// --go-grpc_opt=paths=source_relative proto/cluster.proto
syntax = "proto3";

option go_package = "github.com/ratnadeepb/cluster/proto";

message KeyBroadcastRequest {
  string key = 1;
}

message KeyBroadcastResponse {
  string key = 1;  // Sending information on this key.
  int64 count = 
        2;  // Number of time this key was seen. 0 == not tracked or not seen.
  string master   = 3;  // If key is hot, then string rep of IP.
  int64 partition = 4;  // The partition this key is mapped to otherwise -1.
}

service KeyBroadcastService {
  rpc KeyBroadcastRPC(KeyBroadcastRequest) returns (KeyBroadcastResponse);
}

// Broadcast declaring self as master.
// But can be marked leader for key only if all votes are in favor.
message VoteForKeyMasterRequest {
  string key    = 1;  // Key for which votes are being asked.
  string master = 2;  // Current node's IP.
}

message VoteForKeyMasterResponse {
  string key = 1;  // Key for which vote is being sent.
  bool vote  = 2;  // Vote - yes or no. If a master has been already voted for
                     // then vote is no.
}

service VoteForKeyMasterService {
  rpc VoteForKeyMaster(VoteForKeyMasterRequest)
        returns (VoteForKeyMasterResponse);
}

// If all votes are in favor then confirm.
message ConfirmKeyMasterRequest {
  string key    = 1;  // Key for which votes are being asked.
  string master = 2;  // Current node's IP.
  int64 partition =
        4;  // Inform the other nodes about the partition being used for 'Key'.
}

message ConfirmKeyMasterResponse {
}

service ConfirmKeyMasterService {
  rpc ConfrimKeyMaster(ConfirmKeyMasterRequest) 
      returns (ConfirmKeyMasterResponse);
}

message ChangeKeyUsageRequest {
  string key  = 1;
  int64 count = 2;
}

message ChangeKeyUsageResponse {
}

service ChangeKeyUsageService {
  rpc ChangeKeyUsage(ChangeKeyUsageRequest) returns (ChangeKeyUsageResponse);
}
